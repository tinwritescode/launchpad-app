/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Dividend, DividendInterface } from "../../contracts/Dividend";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Received",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Dividend.TransferItem[]",
        name: "items",
        type: "tuple[]",
      },
    ],
    name: "distribute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610c848061010d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063adda9eec14610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b6100636100c5565b6040516100709190610637565b60405180910390f35b610093600480360381019061008e9190610876565b6100ee565b005b6100af60048036038101906100aa91906108d2565b610429565b005b6100b96104ac565b6100c3600061052a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6100f66104ac565b6000805b825181101561014257828181518110610116576101156108ff565b5b6020026020010151602001518261012d919061095d565b9150808061013a90610991565b9150506100fa565b508273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161017c9190610637565b602060405180830381865afa158015610199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101bd91906109ee565b8111156101ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f690610a78565b60405180910390fd5b60005b8251811015610423578373ffffffffffffffffffffffffffffffffffffffff1663095ea7b384838151811061023a576102396108ff565b5b602002602001015160000151858481518110610259576102586108ff565b5b6020026020010151602001516040518363ffffffff1660e01b8152600401610282929190610aa7565b6020604051808303816000875af11580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190610b08565b508281815181106102d9576102d86108ff565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff166366168bd730858481518110610314576103136108ff565b5b6020026020010151602001516040518363ffffffff1660e01b815260040161033d929190610aa7565b600060405180830381600087803b15801561035757600080fd5b505af115801561036b573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16838281518110610399576103986108ff565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff167f8cabf31d2b1b11ba52dbb302817a3c9c83e4b2a5194d35121ab1354d69f6a4cb8584815181106103ef576103ee6108ff565b5b6020026020010151602001516040516104089190610b35565b60405180910390a3808061041b90610991565b915050610202565b50505050565b6104316104ac565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790610bc2565b60405180910390fd5b6104a98161052a565b50565b6104b46105ee565b73ffffffffffffffffffffffffffffffffffffffff166104d26100c5565b73ffffffffffffffffffffffffffffffffffffffff1614610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f90610c2e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610621826105f6565b9050919050565b61063181610616565b82525050565b600060208201905061064c6000830184610628565b92915050565b6000604051905090565b600080fd5b600080fd5b61066f81610616565b811461067a57600080fd5b50565b60008135905061068c81610666565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106e082610697565b810181811067ffffffffffffffff821117156106ff576106fe6106a8565b5b80604052505050565b6000610712610652565b905061071e82826106d7565b919050565b600067ffffffffffffffff82111561073e5761073d6106a8565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b61076c81610759565b811461077757600080fd5b50565b60008135905061078981610763565b92915050565b6000604082840312156107a5576107a4610754565b5b6107af6040610708565b905060006107bf8482850161067d565b60008301525060206107d38482850161077a565b60208301525092915050565b60006107f26107ed84610723565b610708565b905080838252602082019050604084028301858111156108155761081461074f565b5b835b8181101561083e578061082a888261078f565b845260208401935050604081019050610817565b5050509392505050565b600082601f83011261085d5761085c610692565b5b813561086d8482602086016107df565b91505092915050565b6000806040838503121561088d5761088c61065c565b5b600061089b8582860161067d565b925050602083013567ffffffffffffffff8111156108bc576108bb610661565b5b6108c885828601610848565b9150509250929050565b6000602082840312156108e8576108e761065c565b5b60006108f68482850161067d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061096882610759565b915061097383610759565b925082820190508082111561098b5761098a61092e565b5b92915050565b600061099c82610759565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109ce576109cd61092e565b5b600182019050919050565b6000815190506109e881610763565b92915050565b600060208284031215610a0457610a0361065c565b5b6000610a12848285016109d9565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b6000610a62601183610a1b565b9150610a6d82610a2c565b602082019050919050565b60006020820190508181036000830152610a9181610a55565b9050919050565b610aa181610759565b82525050565b6000604082019050610abc6000830185610628565b610ac96020830184610a98565b9392505050565b60008115159050919050565b610ae581610ad0565b8114610af057600080fd5b50565b600081519050610b0281610adc565b92915050565b600060208284031215610b1e57610b1d61065c565b5b6000610b2c84828501610af3565b91505092915050565b6000602082019050610b4a6000830184610a98565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610bac602683610a1b565b9150610bb782610b50565b604082019050919050565b60006020820190508181036000830152610bdb81610b9f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c18602083610a1b565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b905091905056fea264697066735822122055300ca34ebf30a147783a26f29e334d55bde47ff1d32a0c7a70ad011164e42a64736f6c63430008120033";

type DividendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DividendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dividend__factory extends ContractFactory {
  constructor(...args: DividendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Dividend> {
    return super.deploy(overrides || {}) as Promise<Dividend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Dividend {
    return super.attach(address) as Dividend;
  }
  override connect(signer: Signer): Dividend__factory {
    return super.connect(signer) as Dividend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DividendInterface {
    return new utils.Interface(_abi) as DividendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Dividend {
    return new Contract(address, _abi, signerOrProvider) as Dividend;
  }
}
