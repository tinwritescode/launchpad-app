{
  "address": "0xf60d153ce93f089f3eaeE93A31e667706483F12f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeUnit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRatioNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRatioDenominator",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeTokenWrapper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinStakeAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNumerator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDenominator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDenominator",
          "type": "uint256"
        }
      ],
      "name": "UpdatedRewardRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTimeUnit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTimeUnit",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTimeUnit",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsAvailableInContract",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokensStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getStakerAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakersLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_timeUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockTimeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_denominator",
          "type": "uint256"
        }
      ],
      "name": "setRewardRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeUnit",
          "type": "uint256"
        }
      ],
      "name": "setTimeUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeOfLastUpdate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "conditionIdOflastUpdate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x187d0854fb1d5f1b4fa89f2cc252b6ff8840c22bb0ff3cb8348ea4d17d068b64",
  "receipt": {
    "to": null,
    "from": "0x56c7b349738CF0AC71aF0B31444bF04E757e2c10",
    "contractAddress": "0xf60d153ce93f089f3eaeE93A31e667706483F12f",
    "transactionIndex": 0,
    "gasUsed": "3342451",
    "logsBloom": "0x
    "blockHash": "0xed8c1573ae6527a20e46e8f00783b4c7d2bb2ec2de8aa5470388e4823599d04e",
    "transactionHash": "0x187d0854fb1d5f1b4fa89f2cc252b6ff8840c22bb0ff3cb8348ea4d17d068b64",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "3342451",
    "status": 1,
    "byzantium": true
  },
  "args": [
    60,
    1,
    10000,
    "0x7911E4cD3a709CCD97b227578B737b5E3E3F30B4",
    "0x7911E4cD3a709CCD97b227578B737b5E3E3F30B4",
    "0x4ad280E008277Ac7Bc19c6edB339Cc9691617EF0",
    31536000
  ],
  "numDeployments": 1,
  "solcInputHash": "b834cd20298d42b34996b162734094f4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRatioNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRatioDenominator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeTokenWrapper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinStakeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNumerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDenominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"UpdatedRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimeUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeUnit\",\"type\":\"uint256\"}],\"name\":\"UpdatedTimeUnit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsAvailableInContract\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakerAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeUnit\",\"type\":\"uint256\"}],\"name\":\"setTimeUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"conditionIdOflastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RewardsClaimed(address,uint256)\":{\"details\":\"Emitted when a staker claims staking rewards.\"},\"TokensStaked(address,uint256)\":{\"details\":\"Emitted when tokens are staked.\"},\"TokensWithdrawn(address,uint256)\":{\"details\":\"Emitted when a tokens are withdrawn.\"},\"UpdatedMinStakeAmount(uint256,uint256)\":{\"details\":\"Emitted when contract admin updates minimum staking amount.\"},\"UpdatedRewardRatio(uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when contract admin updates rewardsPerUnitTime.\"},\"UpdatedTimeUnit(uint256,uint256)\":{\"details\":\"Emitted when contract admin updates timeUnit.\"}},\"kind\":\"dev\",\"methods\":{\"claimRewards()\":{\"details\":\"See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic.\"},\"getStakeInfo(address)\":{\"params\":{\"_staker\":\"Address for which to calculated rewards.\"},\"returns\":{\"_rewards\":\"       Available reward amount.\",\"_tokensStaked\":\"  Amount of tokens staked.\"}},\"setRewardRatio(uint256,uint256)\":{\"details\":\"Only admin/authorized-account can call it.\",\"params\":{\"_denominator\":\"Reward ratio denominator.\",\"_numerator\":\"Reward ratio numerator.\"}},\"setTimeUnit(uint256)\":{\"details\":\"Only admin/authorized-account can call it.\",\"params\":{\"_timeUnit\":\"New time unit.\"}},\"stake(uint256)\":{\"details\":\"See {_stake}. Override that to implement custom logic.\",\"params\":{\"_amount\":\"Amount to stake.\"}},\"withdraw(uint256)\":{\"details\":\"See {_withdraw}. Override that to implement custom logic.\",\"params\":{\"_amount\":\"Amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim accumulated rewards.\"},\"deployer()\":{\"notice\":\"We store the contract deployer's address only for the purposes of the example  in the code comment below.  Doing this is not necessary to use the `Staking20` extension.\"},\"getRewardTokenBalance()\":{\"notice\":\"View total rewards available in the staking contract.\"},\"getStakeInfo(address)\":{\"notice\":\"View amount staked and rewards for a user.\"},\"lockTime()\":{\"notice\":\"Lock time for staking in seconds.\"},\"setRewardRatio(uint256,uint256)\":{\"notice\":\"Set rewards per unit of time.           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked.\"},\"setTimeUnit(uint256)\":{\"notice\":\"Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc.\"},\"stake(uint256)\":{\"notice\":\"Stake ERC20 Tokens.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw staked ERC20 tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@thirdweb-dev/contracts/eip/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5bdd9dd97ba7d9d7c9a2953db287e4d9d7fa93a27a96bc2e72a8da4919b6f7ff\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC20Metadata interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xc2500d7a12573fc6f9714d806bec722ad4110a68e6dd14b69903042421001734\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/Staking20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\nimport \\\"../openzeppelin-presets/security/ReentrancyGuard.sol\\\";\\nimport \\\"../openzeppelin-presets/utils/math/SafeMath.sol\\\";\\nimport \\\"../eip/interface/IERC20.sol\\\";\\nimport \\\"../lib/CurrencyTransferLib.sol\\\";\\n\\nimport \\\"./interface/IStaking20.sol\\\";\\n\\nabstract contract Staking20 is ReentrancyGuard, IStaking20 {\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables / Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev The address of the native token wrapper contract.\\n    address internal immutable nativeTokenWrapper;\\n\\n    ///@dev Address of ERC20 contract -- staked tokens belong to this contract.\\n    address public stakingToken;\\n\\n    /// @dev Decimals of staking token.\\n    uint256 public stakingTokenDecimals;\\n\\n    /// @dev Decimals of reward token.\\n    uint256 public rewardTokenDecimals;\\n\\n    /// @dev List of accounts that have staked that token-id.\\n    address[] public stakersArray;\\n\\n    /// @dev Total amount of tokens staked in the contract.\\n    uint256 public stakingTokenBalance;\\n\\n    ///@dev Next staking condition Id. Tracks number of conditon updates so far.\\n    uint256 private nextConditionId;\\n\\n    ///@dev Mapping staker address to Staker struct. See {struct IStaking20.Staker}.\\n    mapping(address => Staker) public stakers;\\n\\n    ///@dev Mapping from condition Id to staking condition. See {struct IStaking721.StakingCondition}\\n    mapping(uint256 => StakingCondition) private stakingConditions;\\n\\n    constructor(\\n        address _nativeTokenWrapper,\\n        address _stakingToken,\\n        uint256 _stakingTokenDecimals,\\n        uint256 _rewardTokenDecimals\\n    ) ReentrancyGuard() {\\n        require(_stakingToken != address(0) && _nativeTokenWrapper != address(0), \\\"address 0\\\");\\n        require(_stakingTokenDecimals != 0 && _rewardTokenDecimals != 0, \\\"decimals 0\\\");\\n\\n        nativeTokenWrapper = _nativeTokenWrapper;\\n        stakingToken = _stakingToken;\\n        stakingTokenDecimals = _stakingTokenDecimals;\\n        rewardTokenDecimals = _rewardTokenDecimals;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        External/Public Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice    Stake ERC20 Tokens.\\n     *\\n     *  @dev       See {_stake}. Override that to implement custom logic.\\n     *\\n     *  @param _amount    Amount to stake.\\n     */\\n    function stake(uint256 _amount) external payable nonReentrant {\\n        _stake(_amount);\\n    }\\n\\n    /**\\n     *  @notice    Withdraw staked ERC20 tokens.\\n     *\\n     *  @dev       See {_withdraw}. Override that to implement custom logic.\\n     *\\n     *  @param _amount    Amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        _withdraw(_amount);\\n    }\\n\\n    /**\\n     *  @notice    Claim accumulated rewards.\\n     *\\n     *  @dev       See {_claimRewards}. Override that to implement custom logic.\\n     *             See {_calculateRewards} for reward-calculation logic.\\n     */\\n    function claimRewards() external nonReentrant {\\n        _claimRewards();\\n    }\\n\\n    /**\\n     *  @notice  Set time unit. Set as a number of seconds.\\n     *           Could be specified as -- x * 1 hours, x * 1 days, etc.\\n     *\\n     *  @dev     Only admin/authorized-account can call it.\\n     *\\n     *  @param _timeUnit    New time unit.\\n     */\\n    function setTimeUnit(uint256 _timeUnit) external virtual {\\n        if (!_canSetStakeConditions()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        StakingCondition memory condition = stakingConditions[nextConditionId - 1];\\n        require(_timeUnit != condition.timeUnit, \\\"Time-unit unchanged.\\\");\\n\\n        _setStakingCondition(_timeUnit, condition.rewardRatioNumerator, condition.rewardRatioDenominator);\\n\\n        emit UpdatedTimeUnit(condition.timeUnit, _timeUnit);\\n    }\\n\\n    /**\\n     *  @notice  Set rewards per unit of time.\\n     *           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.\\n     *\\n     *           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked.\\n     *\\n     *  @dev     Only admin/authorized-account can call it.\\n     *\\n     *  @param _numerator    Reward ratio numerator.\\n     *  @param _denominator  Reward ratio denominator.\\n     */\\n    function setRewardRatio(uint256 _numerator, uint256 _denominator) external virtual {\\n        if (!_canSetStakeConditions()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        StakingCondition memory condition = stakingConditions[nextConditionId - 1];\\n        require(\\n            _numerator != condition.rewardRatioNumerator || _denominator != condition.rewardRatioDenominator,\\n            \\\"Reward ratio unchanged.\\\"\\n        );\\n        _setStakingCondition(condition.timeUnit, _numerator, _denominator);\\n\\n        emit UpdatedRewardRatio(\\n            condition.rewardRatioNumerator,\\n            _numerator,\\n            condition.rewardRatioDenominator,\\n            _denominator\\n        );\\n    }\\n\\n    /**\\n     *  @notice View amount staked and rewards for a user.\\n     *\\n     *  @param _staker          Address for which to calculated rewards.\\n     *  @return _tokensStaked   Amount of tokens staked.\\n     *  @return _rewards        Available reward amount.\\n     */\\n    function getStakeInfo(address _staker) external view virtual returns (uint256 _tokensStaked, uint256 _rewards) {\\n        _tokensStaked = stakers[_staker].amountStaked;\\n        _rewards = _availableRewards(_staker);\\n    }\\n\\n    function getTimeUnit() public view returns (uint256 _timeUnit) {\\n        _timeUnit = stakingConditions[nextConditionId - 1].timeUnit;\\n    }\\n\\n    function getRewardRatio() public view returns (uint256 _numerator, uint256 _denominator) {\\n        _numerator = stakingConditions[nextConditionId - 1].rewardRatioNumerator;\\n        _denominator = stakingConditions[nextConditionId - 1].rewardRatioDenominator;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Internal Functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Staking logic. Override to add custom logic.\\n    function _stake(uint256 _amount) internal virtual {\\n        require(_amount != 0, \\\"Staking 0 tokens\\\");\\n\\n        address _stakingToken;\\n        if (stakingToken == CurrencyTransferLib.NATIVE_TOKEN) {\\n            _stakingToken = nativeTokenWrapper;\\n        } else {\\n            require(msg.value == 0, \\\"Value not 0\\\");\\n            _stakingToken = stakingToken;\\n        }\\n\\n        if (stakers[_stakeMsgSender()].amountStaked > 0) {\\n            _updateUnclaimedRewardsForStaker(_stakeMsgSender());\\n        } else {\\n            stakersArray.push(_stakeMsgSender());\\n            stakers[_stakeMsgSender()].timeOfLastUpdate = block.timestamp;\\n            stakers[_stakeMsgSender()].conditionIdOflastUpdate = nextConditionId - 1;\\n        }\\n\\n        uint256 balanceBefore = IERC20(_stakingToken).balanceOf(address(this));\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            stakingToken,\\n            _stakeMsgSender(),\\n            address(this),\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n        uint256 actualAmount = IERC20(_stakingToken).balanceOf(address(this)) - balanceBefore;\\n\\n        stakers[_stakeMsgSender()].amountStaked += actualAmount;\\n        stakingTokenBalance += actualAmount;\\n\\n        emit TokensStaked(_stakeMsgSender(), actualAmount);\\n    }\\n\\n    /// @dev Withdraw logic. Override to add custom logic.\\n    function _withdraw(uint256 _amount) internal virtual {\\n        uint256 _amountStaked = stakers[_stakeMsgSender()].amountStaked;\\n        require(_amount != 0, \\\"Withdrawing 0 tokens\\\");\\n        require(_amountStaked >= _amount, \\\"Withdrawing more than staked\\\");\\n\\n        _updateUnclaimedRewardsForStaker(_stakeMsgSender());\\n\\n        if (_amountStaked == _amount) {\\n            address[] memory _stakersArray = stakersArray;\\n            for (uint256 i = 0; i < _stakersArray.length; ++i) {\\n                if (_stakersArray[i] == _stakeMsgSender()) {\\n                    stakersArray[i] = _stakersArray[_stakersArray.length - 1];\\n                    stakersArray.pop();\\n                    break;\\n                }\\n            }\\n        }\\n        stakers[_stakeMsgSender()].amountStaked -= _amount;\\n        stakingTokenBalance -= _amount;\\n\\n        CurrencyTransferLib.transferCurrencyWithWrapper(\\n            stakingToken,\\n            address(this),\\n            _stakeMsgSender(),\\n            _amount,\\n            nativeTokenWrapper\\n        );\\n\\n        emit TokensWithdrawn(_stakeMsgSender(), _amount);\\n    }\\n\\n    /// @dev Logic for claiming rewards. Override to add custom logic.\\n    function _claimRewards() internal virtual {\\n        uint256 rewards = stakers[_stakeMsgSender()].unclaimedRewards + _calculateRewards(_stakeMsgSender());\\n\\n        require(rewards != 0, \\\"No rewards\\\");\\n\\n        stakers[_stakeMsgSender()].timeOfLastUpdate = block.timestamp;\\n        stakers[_stakeMsgSender()].unclaimedRewards = 0;\\n        stakers[_stakeMsgSender()].conditionIdOflastUpdate = nextConditionId - 1;\\n\\n        _mintRewards(_stakeMsgSender(), rewards);\\n\\n        emit RewardsClaimed(_stakeMsgSender(), rewards);\\n    }\\n\\n    /// @dev View available rewards for a user.\\n    function _availableRewards(address _staker) internal view virtual returns (uint256 _rewards) {\\n        if (stakers[_staker].amountStaked == 0) {\\n            _rewards = stakers[_staker].unclaimedRewards;\\n        } else {\\n            _rewards = stakers[_staker].unclaimedRewards + _calculateRewards(_staker);\\n        }\\n    }\\n\\n    /// @dev Update unclaimed rewards for a users. Called for every state change for a user.\\n    function _updateUnclaimedRewardsForStaker(address _staker) internal virtual {\\n        uint256 rewards = _calculateRewards(_staker);\\n        stakers[_staker].unclaimedRewards += rewards;\\n        stakers[_staker].timeOfLastUpdate = block.timestamp;\\n        stakers[_staker].conditionIdOflastUpdate = nextConditionId - 1;\\n    }\\n\\n    /// @dev Set staking conditions.\\n    function _setStakingCondition(\\n        uint256 _timeUnit,\\n        uint256 _numerator,\\n        uint256 _denominator\\n    ) internal virtual {\\n        require(_denominator != 0, \\\"divide by 0\\\");\\n        require(_timeUnit != 0, \\\"time-unit can't be 0\\\");\\n        uint256 conditionId = nextConditionId;\\n        nextConditionId += 1;\\n\\n        stakingConditions[conditionId] = StakingCondition({\\n            timeUnit: _timeUnit,\\n            rewardRatioNumerator: _numerator,\\n            rewardRatioDenominator: _denominator,\\n            startTimestamp: block.timestamp,\\n            endTimestamp: 0\\n        });\\n\\n        if (conditionId > 0) {\\n            stakingConditions[conditionId - 1].endTimestamp = block.timestamp;\\n        }\\n    }\\n\\n    /// @dev Calculate rewards for a staker.\\n    function _calculateRewards(address _staker) internal view virtual returns (uint256 _rewards) {\\n        Staker memory staker = stakers[_staker];\\n\\n        uint256 _stakerConditionId = staker.conditionIdOflastUpdate;\\n        uint256 _nextConditionId = nextConditionId;\\n\\n        for (uint256 i = _stakerConditionId; i < _nextConditionId; i += 1) {\\n            StakingCondition memory condition = stakingConditions[i];\\n\\n            uint256 startTime = i != _stakerConditionId ? condition.startTimestamp : staker.timeOfLastUpdate;\\n            uint256 endTime = condition.endTimestamp != 0 ? condition.endTimestamp : block.timestamp;\\n\\n            (bool noOverflowProduct, uint256 rewardsProduct) = SafeMath.tryMul(\\n                (endTime - startTime) * staker.amountStaked,\\n                condition.rewardRatioNumerator\\n            );\\n            (bool noOverflowSum, uint256 rewardsSum) = SafeMath.tryAdd(\\n                _rewards,\\n                (rewardsProduct / condition.timeUnit) / condition.rewardRatioDenominator\\n            );\\n\\n            _rewards = noOverflowProduct && noOverflowSum ? rewardsSum : _rewards;\\n        }\\n\\n        (, _rewards) = SafeMath.tryMul(_rewards, 10**rewardTokenDecimals);\\n\\n        _rewards /= (10**stakingTokenDecimals);\\n    }\\n\\n    /*////////////////////////////////////////////////////////////////////\\n        Optional hooks that can be implemented in the derived contract\\n    ///////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Exposes the ability to override the msg sender -- support ERC2771.\\n    function _stakeMsgSender() internal virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n        Virtual functions to be implemented in derived contract\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice View total rewards available in the staking contract.\\n     *\\n     */\\n    function getRewardTokenBalance() external view virtual returns (uint256 _rewardsAvailableInContract);\\n\\n    /**\\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\\n     *\\n     *  @param _staker    Address for which to calculated rewards.\\n     *  @param _rewards   Amount of tokens to be given out as reward.\\n     *\\n     *  For example, override as below to mint ERC20 rewards:\\n     *\\n     * ```\\n     *  function _mintRewards(address _staker, uint256 _rewards) internal override {\\n     *\\n     *      TokenERC20(rewardTokenAddress).mintTo(_staker, _rewards);\\n     *\\n     *  }\\n     * ```\\n     */\\n    function _mintRewards(address _staker, uint256 _rewards) internal virtual;\\n\\n    /**\\n     *  @dev    Returns whether staking restrictions can be set in given execution context.\\n     *          Must override.\\n     *\\n     *\\n     *  For example, override as below to restrict access to admin:\\n     *\\n     * ```\\n     *  function _canSetStakeConditions() internal override {\\n     *\\n     *      return msg.sender == adminAddress;\\n     *\\n     *  }\\n     * ```\\n     */\\n    function _canSetStakeConditions() internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x47cb5811b2e64295b4d2e5b9152f106d2eadb5d07e100541602bf8218c8469c8\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/extension/interface/IStaking20.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\ninterface IStaking20 {\\n    /// @dev Emitted when tokens are staked.\\n    event TokensStaked(address indexed staker, uint256 amount);\\n\\n    /// @dev Emitted when a tokens are withdrawn.\\n    event TokensWithdrawn(address indexed staker, uint256 amount);\\n\\n    /// @dev Emitted when a staker claims staking rewards.\\n    event RewardsClaimed(address indexed staker, uint256 rewardAmount);\\n\\n    /// @dev Emitted when contract admin updates timeUnit.\\n    event UpdatedTimeUnit(uint256 oldTimeUnit, uint256 newTimeUnit);\\n\\n    /// @dev Emitted when contract admin updates rewardsPerUnitTime.\\n    event UpdatedRewardRatio(\\n        uint256 oldNumerator,\\n        uint256 newNumerator,\\n        uint256 oldDenominator,\\n        uint256 newDenominator\\n    );\\n\\n    /// @dev Emitted when contract admin updates minimum staking amount.\\n    event UpdatedMinStakeAmount(uint256 oldAmount, uint256 newAmount);\\n\\n    /**\\n     *  @notice Staker Info.\\n     *\\n     *  @param amountStaked             Total number of tokens staked by the staker.\\n     *\\n     *  @param timeOfLastUpdate         Last reward-update timestamp.\\n     *\\n     *  @param unclaimedRewards         Rewards accumulated but not claimed by user yet.\\n     *\\n     *  @param conditionIdOflastUpdate  Condition-Id when rewards were last updated for user.\\n     */\\n    struct Staker {\\n        uint256 amountStaked;\\n        uint256 timeOfLastUpdate;\\n        uint256 unclaimedRewards;\\n        uint256 conditionIdOflastUpdate;\\n    }\\n\\n    /**\\n     *  @notice Staking Condition.\\n     *\\n     *  @param timeUnit                 Unit of time specified in number of seconds. Can be set as 1 seconds, 1 days, 1 hours, etc.\\n     *\\n     *  @param rewardRatioNumerator     Rewards ratio is the number of reward tokens for a number of staked tokens,\\n     *                                  per unit of time.\\n     *\\n     *  @param rewardRatioDenominator   Rewards ratio is the number of reward tokens for a number of staked tokens,\\n     *                                  per unit of time.\\n     *\\n     *  @param startTimestamp           Condition start timestamp.\\n     *\\n     *  @param endTimestamp             Condition end timestamp.\\n     */\\n    struct StakingCondition {\\n        uint256 timeUnit;\\n        uint256 rewardRatioNumerator;\\n        uint256 rewardRatioDenominator;\\n        uint256 startTimestamp;\\n        uint256 endTimestamp;\\n    }\\n\\n    /**\\n     *  @notice Stake ERC721 Tokens.\\n     *\\n     *  @param amount    Amount to stake.\\n     */\\n    function stake(uint256 amount) external payable;\\n\\n    /**\\n     *  @notice Withdraw staked tokens.\\n     *\\n     *  @param amount    Amount to withdraw.\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    /**\\n     *  @notice Claim accumulated rewards.\\n     *\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     *  @notice View amount staked and total rewards for a user.\\n     *\\n     *  @param staker    Address for which to calculated rewards.\\n     */\\n    function getStakeInfo(address staker) external view returns (uint256 _tokensStaked, uint256 _rewards);\\n}\\n\",\"keccak256\":\"0x56114e7e2946b9850f1bc046a3ffa6c839676d0a5bca52cd96c86d5d2dae6ed8\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x5c1df76e8c1d9b5c069e4c0e35c3ad3316530c382fe3ddc6c21584f5e56f0a7b\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/CurrencyTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n// Helper interfaces\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\n\\nimport \\\"../openzeppelin-presets/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary CurrencyTransferLib {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev The address interpreted as native token of the chain.\\n    address public constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Transfers a given amount of currency.\\n    function transferCurrency(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            safeTransferNativeToken(_to, _amount);\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers a given amount of currency. (With native token wrapping)\\n    function transferCurrencyWithWrapper(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        if (_currency == NATIVE_TOKEN) {\\n            if (_from == address(this)) {\\n                // withdraw from weth then transfer withdrawn native token to recipient\\n                IWETH(_nativeTokenWrapper).withdraw(_amount);\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            } else if (_to == address(this)) {\\n                // store native currency in weth\\n                require(_amount == msg.value, \\\"msg.value != amount\\\");\\n                IWETH(_nativeTokenWrapper).deposit{ value: _amount }();\\n            } else {\\n                safeTransferNativeTokenWithWrapper(_to, _amount, _nativeTokenWrapper);\\n            }\\n        } else {\\n            safeTransferERC20(_currency, _from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount` of ERC20 token from `from` to `to`.\\n    function safeTransferERC20(\\n        address _currency,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_from == _to) {\\n            return;\\n        }\\n\\n        if (_from == address(this)) {\\n            IERC20(_currency).safeTransfer(_to, _amount);\\n        } else {\\n            IERC20(_currency).safeTransferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`.\\n    function safeTransferNativeToken(address to, uint256 value) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        require(success, \\\"native token transfer failed\\\");\\n    }\\n\\n    /// @dev Transfers `amount` of native token to `to`. (With native token wrapping)\\n    function safeTransferNativeTokenWithWrapper(\\n        address to,\\n        uint256 value,\\n        address _nativeTokenWrapper\\n    ) internal {\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, ) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            IWETH(_nativeTokenWrapper).deposit{ value: value }();\\n            IERC20(_nativeTokenWrapper).safeTransfer(to, value);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b0dc7c0ca9e463b2efbf3e8177a40bab333f5669ab368cad98534678a81cbc3\",\"license\":\"Apache-2.0\"},\"@thirdweb-dev/contracts/lib/TWAddress.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\"},\"@thirdweb-dev/contracts/openzeppelin-presets/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/openzeppelin-presets/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../eip/interface/IERC20.sol\\\";\\nimport \\\"../../../../lib/TWAddress.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using TWAddress for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x293d8d7a3502950df5b9d6d36fcad85ca758f06dd946cdc8645cac1aa56686c4\",\"license\":\"MIT\"},\"@thirdweb-dev/contracts/openzeppelin-presets/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@thirdweb-dev/contracts/extension/Staking20.sol';\\nimport '@thirdweb-dev/contracts/eip/interface/IERC20.sol';\\nimport '@thirdweb-dev/contracts/eip/interface/IERC20Metadata.sol';\\nimport './interface/IStaking.sol';\\n\\ncontract Staking is IStaking, Staking20 {\\n    // ERC20 Reward Token address. See {_mintRewards}.\\n    address public rewardToken;\\n\\n    /**\\n     *  We store the contract deployer's address only for the purposes of the example\\n     *  in the code comment below.\\n     *\\n     *  Doing this is not necessary to use the `Staking20` extension.\\n     */\\n    address public deployer;\\n\\n    /**\\n     * Lock time for staking in seconds.\\n     */\\n    uint256 public lockTime;\\n    mapping(address => uint256) public lockTimeOf;\\n\\n    constructor(\\n        uint256 _timeUnit,\\n        uint256 _rewardRatioNumerator,\\n        uint256 _rewardRatioDenominator,\\n        address _stakingToken,\\n        address _rewardToken,\\n        address _nativeTokenWrapper,\\n        uint256 _lockTime\\n    )\\n        Staking20(\\n            _nativeTokenWrapper,\\n            _stakingToken,\\n            IERC20Metadata(_stakingToken).decimals(),\\n            IERC20Metadata(_rewardToken).decimals()\\n        )\\n    {\\n        _setStakingCondition(\\n            _timeUnit,\\n            _rewardRatioNumerator,\\n            _rewardRatioDenominator\\n        );\\n\\n        rewardToken = _rewardToken;\\n        deployer = msg.sender;\\n        lockTime = _lockTime;\\n    }\\n\\n    /**\\n     *  @dev    Mint/Transfer ERC20 rewards to the staker. Must override.\\n     *\\n     *  @param _staker    Address for sending rewards to.\\n     *  @param _rewards   Amount of tokens to be given out as reward.\\n     *\\n     */\\n    function _mintRewards(address _staker, uint256 _rewards) internal override {\\n        IERC20(rewardToken).transfer(_staker, _rewards);\\n    }\\n\\n    // Returns whether staking restrictions can be set in given execution context.\\n    function _canSetStakeConditions() internal view override returns (bool) {\\n        return msg.sender == deployer;\\n    }\\n\\n    function getRewardTokenBalance()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256 _rewardsAvailableInContract)\\n    {\\n        _rewardsAvailableInContract = IERC20(rewardToken).balanceOf(\\n            address(this)\\n        );\\n\\n        if (stakingToken == rewardToken) {\\n            _rewardsAvailableInContract =\\n                _rewardsAvailableInContract -\\n                stakingTokenBalance;\\n        }\\n    }\\n\\n    function _claimRewards() internal override {\\n        require(lockTimeOf[msg.sender] < block.timestamp, 'Staking is locked');\\n\\n        super._claimRewards();\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        require(lockTimeOf[msg.sender] < block.timestamp, 'Staking is locked');\\n\\n        super._withdraw(_amount);\\n    }\\n\\n    /// @dev When staking, set new lock time.\\n    function _stake(uint256 _amount) internal override {\\n        lockTimeOf[msg.sender] = block.timestamp + lockTime;\\n        super._stake(_amount);\\n    }\\n\\n    function getStakersLength() external view override returns (uint256) {\\n        return stakersArray.length;\\n    }\\n\\n    function getStakerAtIndex(\\n        uint256 _index\\n    ) external view override returns (address) {\\n        return stakersArray[_index];\\n    }\\n\\n    function getStakingToken() external view override returns (address) {\\n        return stakingToken;\\n    }\\n\\n    function getRewardToken() external view override returns (address) {\\n        return rewardToken;\\n    }\\n}\\n\",\"keccak256\":\"0xdeb55585fcdfd8e4150c8f0e39cf9dbf1a15e14fd6b2dc2bc207aef3cdff73c6\",\"license\":\"MIT\"},\"contracts/interface/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@thirdweb-dev/contracts/extension/Staking20.sol\\\";\\n\\ninterface IStaking is IStaking20 {\\n    function getStakersLength() external view returns (uint256);\\n\\n    function getStakerAtIndex(uint256 _index) external view returns (address);\\n\\n    function getStakingToken() external view returns (address);\\n\\n    function getRewardToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfc8cdaa0cf4bfe2ab8f09d381cc859a7f2da2637d52e4c3794049849e9a71ef1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003f4a38038062003f4a83398181016040528101906200003791906200055b565b81848573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ab91906200064c565b60ff168573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000fa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012091906200064c565b60ff166001600081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015620001965750600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b620001d8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001cf90620006df565b60405180910390fd5b60008214158015620001eb575060008114155b6200022d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002249062000751565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002819055508060038190555050505050620002c78787876200035d60201b60201c565b82600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b8190555050505050505050620008fc565b60008103620003a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200039a90620007c3565b60405180910390fd5b60008303620003e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003e09062000835565b60405180910390fd5b6000600654905060016006600082825462000405919062000886565b925050819055506040518060a0016040528085815260200184815260200183815260200142815260200160008152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506000811115620004b05742600860006001846200049a9190620008c1565b8152602001908152602001600020600401819055505b50505050565b600080fd5b6000819050919050565b620004d081620004bb565b8114620004dc57600080fd5b50565b600081519050620004f081620004c5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200052382620004f6565b9050919050565b620005358162000516565b81146200054157600080fd5b50565b60008151905062000555816200052a565b92915050565b600080600080600080600060e0888a0312156200057d576200057c620004b6565b5b60006200058d8a828b01620004df565b9750506020620005a08a828b01620004df565b9650506040620005b38a828b01620004df565b9550506060620005c68a828b0162000544565b9450506080620005d98a828b0162000544565b93505060a0620005ec8a828b0162000544565b92505060c0620005ff8a828b01620004df565b91505092959891949750929550565b600060ff82169050919050565b62000626816200060e565b81146200063257600080fd5b50565b60008151905062000646816200061b565b92915050565b600060208284031215620006655762000664620004b6565b5b6000620006758482850162000635565b91505092915050565b600082825260208201905092915050565b7f6164647265737320300000000000000000000000000000000000000000000000600082015250565b6000620006c76009836200067e565b9150620006d4826200068f565b602082019050919050565b60006020820190508181036000830152620006fa81620006b8565b9050919050565b7f646563696d616c73203000000000000000000000000000000000000000000000600082015250565b600062000739600a836200067e565b9150620007468262000701565b602082019050919050565b600060208201905081810360008301526200076c816200072a565b9050919050565b7f6469766964652062792030000000000000000000000000000000000000000000600082015250565b6000620007ab600b836200067e565b9150620007b88262000773565b602082019050919050565b60006020820190508181036000830152620007de816200079c565b9050919050565b7f74696d652d756e69742063616e27742062652030000000000000000000000000600082015250565b60006200081d6014836200067e565b91506200082a82620007e5565b602082019050919050565b6000602082019050818103600083015262000850816200080e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200089382620004bb565b9150620008a083620004bb565b9250828201905080821115620008bb57620008ba62000857565b5b92915050565b6000620008ce82620004bb565b9150620008db83620004bb565b9250828203905081811115620008f657620008f562000857565b5b92915050565b60805161362462000926600039600081816114440152818161177e0152611a3901526136246000f3fe60806040526004361061013f5760003560e01c80639168ae72116100b6578063a694fc3a1161006f578063a694fc3a14610451578063b9f7a7b51461046d578063c345315314610498578063d5f39488146104d6578063d68124c714610501578063f7c618c11461052c5761013f565b80639168ae721461033957806393ce53431461037957806397e1b4bc146103a45780639bdcecd1146103d05780639f9106d1146103fb5780639fabeb00146104265761013f565b8063372500ab11610108578063372500ab1461023b5780635357e916146102525780636360106f1461028f57806369940d79146102b857806372f702f3146102e35780638caaa2711461030e5761013f565b80621b7934146101445780630d6680871461016d57806329796290146101985780632a7d61b7146101d55780632e1a7d4d14610212575b600080fd5b34801561015057600080fd5b5061016b60048036038101906101669190612779565b610557565b005b34801561017957600080fd5b506101826106af565b60405161018f91906127c8565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba91906127e3565b6106b5565b6040516101cc9190612851565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190612898565b6106fd565b60405161020991906127c8565b60405180910390f35b34801561021e57600080fd5b50610239600480360381019061023491906127e3565b610715565b005b34801561024757600080fd5b50610250610776565b005b34801561025e57600080fd5b50610279600480360381019061027491906127e3565b6107d5565b6040516102869190612851565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b191906127e3565b610814565b005b3480156102c457600080fd5b506102cd610957565b6040516102da9190612851565b60405180910390f35b3480156102ef57600080fd5b506102f8610981565b6040516103059190612851565b60405180910390f35b34801561031a57600080fd5b506103236109a7565b60405161033091906127c8565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612898565b6109ad565b60405161037094939291906128c5565b60405180910390f35b34801561038557600080fd5b5061038e6109dd565b60405161039b91906127c8565b60405180910390f35b3480156103b057600080fd5b506103b9610b08565b6040516103c792919061290a565b60405180910390f35b3480156103dc57600080fd5b506103e5610b5d565b6040516103f291906127c8565b60405180910390f35b34801561040757600080fd5b50610410610b63565b60405161041d9190612851565b60405180910390f35b34801561043257600080fd5b5061043b610b8d565b60405161044891906127c8565b60405180910390f35b61046b600480360381019061046691906127e3565b610b9a565b005b34801561047957600080fd5b50610482610bfb565b60405161048f91906127c8565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190612898565b610c01565b6040516104cd92919061290a565b60405180910390f35b3480156104e257600080fd5b506104eb610c59565b6040516104f89190612851565b60405180910390f35b34801561050d57600080fd5b50610516610c7f565b60405161052391906127c8565b60405180910390f35b34801561053857600080fd5b50610541610cab565b60405161054e9190612851565b60405180910390f35b61055f610cd1565b61059e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059590612990565b60405180910390fd5b60006008600060016006546105b391906129df565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050806020015183141580610617575080604001518214155b610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90612a5f565b60405180910390fd5b61066581600001518484610d29565b7feb6684a1e7c9bd2adc792fb253558f022bcbef39fb6ad31dc58cdfefdd5b51908160200151848360400151856040516106a294939291906128c5565b60405180910390a1505050565b600b5481565b6000600482815481106106cb576106ca612a7f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600c6020528060005260406000206000915090505481565b60026000540361075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190612afa565b60405180910390fd5b600260008190555061076b81610e77565b600160008190555050565b6002600054036107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290612afa565b60405180910390fd5b60026000819055506107cb610f04565b6001600081905550565b600481815481106107e557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61081c610cd1565b61085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290612990565b60405180910390fd5b600060086000600160065461087091906129df565b81526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905080600001518203610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612b66565b60405180910390fd5b6109168282602001518360400151610d29565b7fd968de290ed68f978b9e4816f7d4be9ef46189fe8eeb3eeb86199e7229cf2de081600001518360405161094b92919061290a565b60405180910390a15050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a3a9190612851565b602060405180830381865afa158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190612b9b565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b055760055481610b0291906129df565b90505b90565b600080600860006001600654610b1e91906129df565b8152602001908152602001600020600101549150600860006001600654610b4591906129df565b81526020019081526020016000206002015490509091565b60035481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600480549050905090565b600260005403610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd690612afa565b60405180910390fd5b6002600081905550610bf081610f8f565b600160008190555050565b60025481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150610c5283610fec565b9050915091565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860006001600654610c9491906129df565b815260200190815260200160002060000154905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008103610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6390612c14565b60405180910390fd5b60008303610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690612c80565b60405180910390fd5b60006006549050600160066000828254610dc99190612ca0565b925050819055506040518060a0016040528085815260200184815260200183815260200142815260200160008152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506000811115610e71574260086000600184610e5b91906129df565b8152602001908152602001600020600401819055505b50505050565b42600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eef90612d20565b60405180910390fd5b610f01816110df565b50565b42600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90612d20565b60405180910390fd5b610f8d6114c1565b565b600b5442610f9d9190612ca0565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fe9816116ce565b50565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540361108157600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506110da565b61108a82611bba565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546110d79190612ca0565b90505b919050565b6000600760006110ed611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060008203611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790612d8c565b60405180910390fd5b818110156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa90612df8565b60405180910390fd5b6111c36111be611dad565b611db5565b818103611399576000600480548060200260200160405190810160405280929190818152602001828054801561124e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611204575b5050505050905060005b815181101561139657611269611dad565b73ffffffffffffffffffffffffffffffffffffffff1682828151811061129257611291612a7f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036113855781600183516112c491906129df565b815181106112d5576112d4612a7f565b5b6020026020010151600482815481106112f1576112f0612a7f565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600480548061134b5761134a612e18565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611396565b8061138f90612e47565b9050611258565b50505b81600760006113a6611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546113f291906129df565b92505081905550816005600082825461140b91906129df565b92505081905550611468600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630611441611dad565b857f0000000000000000000000000000000000000000000000000000000000000000611ebb565b611470611dad565b73ffffffffffffffffffffffffffffffffffffffff167f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b836040516114b591906127c8565b60405180910390a25050565b60006114d36114ce611dad565b611bba565b600760006114df611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546115279190612ca0565b90506000810361156c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156390612edb565b60405180910390fd5b4260076000611579611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600760006115c8611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600160065461161891906129df565b60076000611624611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611676611670611dad565b826120bb565b61167e611dad565b73ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe826040516116c391906127c8565b60405180910390a250565b60008103611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170890612f47565b60405180910390fd5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036117a4577f0000000000000000000000000000000000000000000000000000000000000000905061180d565b600034146117e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117de90612fb3565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60006007600061181b611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156118745761186f61186a611dad565b611db5565b611989565b600461187e611dad565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600760006118eb611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160065461193b91906129df565b60076000611947611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119c49190612851565b602060405180830381865afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a059190612b9b565b9050611a5d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a35611dad565b30867f0000000000000000000000000000000000000000000000000000000000000000611ebb565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a999190612851565b602060405180830381865afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190612b9b565b611ae491906129df565b90508060076000611af3611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611b3f9190612ca0565b925050819055508060056000828254611b589190612ca0565b92505081905550611b67611dad565b73ffffffffffffffffffffffffffffffffffffffff167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef82604051611bac91906127c8565b60405180910390a250505050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000816060015190506000600654905060008290505b81811015611d6a576000600860008381526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000848303611cb6578560200151611cbc565b81606001515b9050600080836080015103611cd15742611cd7565b82608001515b9050600080611d0489600001518585611cf091906129df565b611cfa9190612fd3565b8660200151612160565b91509150600080611d338c8860400151896000015186611d249190613044565b611d2e9190613044565b6121b3565b91509150838015611d415750815b611d4b578b611d4d565b805b9b5050505050505050600181611d639190612ca0565b9050611c47565b50611d8384600354600a611d7e91906131a8565b612160565b905080945050600254600a611d9891906131a8565b84611da39190613044565b9350505050919050565b600033905090565b6000611dc082611bba565b905080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254611e149190612ca0565b9250508190555042600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600654611e7191906129df565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505050565b60008203156120b45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120a6573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611fb9578073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401611f7791906127c8565b600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b50505050611fb48383836121e2565b6120a1565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120945734821461202e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120259061323f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b50505050506120a0565b61209f8383836121e2565b5b5b6120b3565b6120b2858585856122e6565b5b5b5050505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161211892919061325f565b6020604051808303816000875af1158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b91906132c0565b505050565b600080600084036121785760016000915091506121ac565b60008385029050838582816121905761218f613015565b5b04146121a35760008092509250506121ac565b60018192509250505b9250929050565b60008060008385019050848110156121d25760008092509250506121db565b60018192509250505b9250929050565b60008373ffffffffffffffffffffffffffffffffffffffff16836040516122089061331e565b60006040518083038185875af1925050503d8060008114612245576040519150601f19603f3d011682016040523d82523d6000602084013e61224a565b606091505b50509050806122e0578173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b50505050506122df84848473ffffffffffffffffffffffffffffffffffffffff166123b29092919063ffffffff16565b5b50505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603156123ac573073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361237d5761237882828673ffffffffffffffffffffffffffffffffffffffff166123b29092919063ffffffff16565b6123ab565b6123aa8383838773ffffffffffffffffffffffffffffffffffffffff16612438909392919063ffffffff16565b5b5b50505050565b6124338363a9059cbb60e01b84846040516024016123d192919061325f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124c1565b505050565b6124bb846323b872dd60e01b85858560405160240161245993929190613333565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124c1565b50505050565b6000612523826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125889092919063ffffffff16565b9050600081511115612583578080602001905181019061254391906132c0565b612582576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612579906133dc565b60405180910390fd5b5b505050565b606061259784846000856125a0565b90509392505050565b6060824710156125e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125dc9061346e565b60405180910390fd5b6125ee856126b4565b61262d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612624906134da565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516126569190613560565b60006040518083038185875af1925050503d8060008114612693576040519150601f19603f3d011682016040523d82523d6000602084013e612698565b606091505b50915091506126a88282866126d7565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156126e757829050612737565b6000835111156126fa5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272e91906135cc565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b61275681612743565b811461276157600080fd5b50565b6000813590506127738161274d565b92915050565b600080604083850312156127905761278f61273e565b5b600061279e85828601612764565b92505060206127af85828601612764565b9150509250929050565b6127c281612743565b82525050565b60006020820190506127dd60008301846127b9565b92915050565b6000602082840312156127f9576127f861273e565b5b600061280784828501612764565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061283b82612810565b9050919050565b61284b81612830565b82525050565b60006020820190506128666000830184612842565b92915050565b61287581612830565b811461288057600080fd5b50565b6000813590506128928161286c565b92915050565b6000602082840312156128ae576128ad61273e565b5b60006128bc84828501612883565b91505092915050565b60006080820190506128da60008301876127b9565b6128e760208301866127b9565b6128f460408301856127b9565b61290160608301846127b9565b95945050505050565b600060408201905061291f60008301856127b9565b61292c60208301846127b9565b9392505050565b600082825260208201905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b600061297a600e83612933565b915061298582612944565b602082019050919050565b600060208201905081810360008301526129a98161296d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129ea82612743565b91506129f583612743565b9250828203905081811115612a0d57612a0c6129b0565b5b92915050565b7f52657761726420726174696f20756e6368616e6765642e000000000000000000600082015250565b6000612a49601783612933565b9150612a5482612a13565b602082019050919050565b60006020820190508181036000830152612a7881612a3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612ae4601f83612933565b9150612aef82612aae565b602082019050919050565b60006020820190508181036000830152612b1381612ad7565b9050919050565b7f54696d652d756e697420756e6368616e6765642e000000000000000000000000600082015250565b6000612b50601483612933565b9150612b5b82612b1a565b602082019050919050565b60006020820190508181036000830152612b7f81612b43565b9050919050565b600081519050612b958161274d565b92915050565b600060208284031215612bb157612bb061273e565b5b6000612bbf84828501612b86565b91505092915050565b7f6469766964652062792030000000000000000000000000000000000000000000600082015250565b6000612bfe600b83612933565b9150612c0982612bc8565b602082019050919050565b60006020820190508181036000830152612c2d81612bf1565b9050919050565b7f74696d652d756e69742063616e27742062652030000000000000000000000000600082015250565b6000612c6a601483612933565b9150612c7582612c34565b602082019050919050565b60006020820190508181036000830152612c9981612c5d565b9050919050565b6000612cab82612743565b9150612cb683612743565b9250828201905080821115612cce57612ccd6129b0565b5b92915050565b7f5374616b696e67206973206c6f636b6564000000000000000000000000000000600082015250565b6000612d0a601183612933565b9150612d1582612cd4565b602082019050919050565b60006020820190508181036000830152612d3981612cfd565b9050919050565b7f5769746864726177696e67203020746f6b656e73000000000000000000000000600082015250565b6000612d76601483612933565b9150612d8182612d40565b602082019050919050565b60006020820190508181036000830152612da581612d69565b9050919050565b7f5769746864726177696e67206d6f7265207468616e207374616b656400000000600082015250565b6000612de2601c83612933565b9150612ded82612dac565b602082019050919050565b60006020820190508181036000830152612e1181612dd5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000612e5282612743565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e8457612e836129b0565b5b600182019050919050565b7f4e6f207265776172647300000000000000000000000000000000000000000000600082015250565b6000612ec5600a83612933565b9150612ed082612e8f565b602082019050919050565b60006020820190508181036000830152612ef481612eb8565b9050919050565b7f5374616b696e67203020746f6b656e7300000000000000000000000000000000600082015250565b6000612f31601083612933565b9150612f3c82612efb565b602082019050919050565b60006020820190508181036000830152612f6081612f24565b9050919050565b7f56616c7565206e6f742030000000000000000000000000000000000000000000600082015250565b6000612f9d600b83612933565b9150612fa882612f67565b602082019050919050565b60006020820190508181036000830152612fcc81612f90565b9050919050565b6000612fde82612743565b9150612fe983612743565b9250828202612ff781612743565b9150828204841483151761300e5761300d6129b0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304f82612743565b915061305a83612743565b92508261306a57613069613015565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b60018511156130cc578086048111156130a8576130a76129b0565b5b60018516156130b75780820291505b80810290506130c585613075565b945061308c565b94509492505050565b6000826130e557600190506131a1565b816130f357600090506131a1565b8160018114613109576002811461311357613142565b60019150506131a1565b60ff841115613125576131246129b0565b5b8360020a91508482111561313c5761313b6129b0565b5b506131a1565b5060208310610133831016604e8410600b84101617156131775782820a905083811115613172576131716129b0565b5b6131a1565b6131848484846001613082565b9250905081840481111561319b5761319a6129b0565b5b81810290505b9392505050565b60006131b382612743565b91506131be83612743565b92506131eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846130d5565b905092915050565b7f6d73672e76616c756520213d20616d6f756e7400000000000000000000000000600082015250565b6000613229601383612933565b9150613234826131f3565b602082019050919050565b600060208201905081810360008301526132588161321c565b9050919050565b60006040820190506132746000830185612842565b61328160208301846127b9565b9392505050565b60008115159050919050565b61329d81613288565b81146132a857600080fd5b50565b6000815190506132ba81613294565b92915050565b6000602082840312156132d6576132d561273e565b5b60006132e4848285016132ab565b91505092915050565b600081905092915050565b50565b60006133086000836132ed565b9150613313826132f8565b600082019050919050565b6000613329826132fb565b9150819050919050565b60006060820190506133486000830186612842565b6133556020830185612842565b61336260408301846127b9565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006133c6602a83612933565b91506133d18261336a565b604082019050919050565b600060208201905081810360008301526133f5816133b9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613458602683612933565b9150613463826133fc565b604082019050919050565b600060208201905081810360008301526134878161344b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006134c4601d83612933565b91506134cf8261348e565b602082019050919050565b600060208201905081810360008301526134f3816134b7565b9050919050565b600081519050919050565b60005b83811015613523578082015181840152602081019050613508565b60008484015250505050565b600061353a826134fa565b61354481856132ed565b9350613554818560208601613505565b80840191505092915050565b600061356c828461352f565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061359e82613577565b6135a88185612933565b93506135b8818560208601613505565b6135c181613582565b840191505092915050565b600060208201905081810360008301526135e68184613593565b90509291505056fea264697066735822122017a6f6b9663cf486408156b2ba6330c03b694bd80cd565678a6d388bb84ccda364736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061013f5760003560e01c80639168ae72116100b6578063a694fc3a1161006f578063a694fc3a14610451578063b9f7a7b51461046d578063c345315314610498578063d5f39488146104d6578063d68124c714610501578063f7c618c11461052c5761013f565b80639168ae721461033957806393ce53431461037957806397e1b4bc146103a45780639bdcecd1146103d05780639f9106d1146103fb5780639fabeb00146104265761013f565b8063372500ab11610108578063372500ab1461023b5780635357e916146102525780636360106f1461028f57806369940d79146102b857806372f702f3146102e35780638caaa2711461030e5761013f565b80621b7934146101445780630d6680871461016d57806329796290146101985780632a7d61b7146101d55780632e1a7d4d14610212575b600080fd5b34801561015057600080fd5b5061016b60048036038101906101669190612779565b610557565b005b34801561017957600080fd5b506101826106af565b60405161018f91906127c8565b60405180910390f35b3480156101a457600080fd5b506101bf60048036038101906101ba91906127e3565b6106b5565b6040516101cc9190612851565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190612898565b6106fd565b60405161020991906127c8565b60405180910390f35b34801561021e57600080fd5b50610239600480360381019061023491906127e3565b610715565b005b34801561024757600080fd5b50610250610776565b005b34801561025e57600080fd5b50610279600480360381019061027491906127e3565b6107d5565b6040516102869190612851565b60405180910390f35b34801561029b57600080fd5b506102b660048036038101906102b191906127e3565b610814565b005b3480156102c457600080fd5b506102cd610957565b6040516102da9190612851565b60405180910390f35b3480156102ef57600080fd5b506102f8610981565b6040516103059190612851565b60405180910390f35b34801561031a57600080fd5b506103236109a7565b60405161033091906127c8565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612898565b6109ad565b60405161037094939291906128c5565b60405180910390f35b34801561038557600080fd5b5061038e6109dd565b60405161039b91906127c8565b60405180910390f35b3480156103b057600080fd5b506103b9610b08565b6040516103c792919061290a565b60405180910390f35b3480156103dc57600080fd5b506103e5610b5d565b6040516103f291906127c8565b60405180910390f35b34801561040757600080fd5b50610410610b63565b60405161041d9190612851565b60405180910390f35b34801561043257600080fd5b5061043b610b8d565b60405161044891906127c8565b60405180910390f35b61046b600480360381019061046691906127e3565b610b9a565b005b34801561047957600080fd5b50610482610bfb565b60405161048f91906127c8565b60405180910390f35b3480156104a457600080fd5b506104bf60048036038101906104ba9190612898565b610c01565b6040516104cd92919061290a565b60405180910390f35b3480156104e257600080fd5b506104eb610c59565b6040516104f89190612851565b60405180910390f35b34801561050d57600080fd5b50610516610c7f565b60405161052391906127c8565b60405180910390f35b34801561053857600080fd5b50610541610cab565b60405161054e9190612851565b60405180910390f35b61055f610cd1565b61059e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059590612990565b60405180910390fd5b60006008600060016006546105b391906129df565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050806020015183141580610617575080604001518214155b610656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064d90612a5f565b60405180910390fd5b61066581600001518484610d29565b7feb6684a1e7c9bd2adc792fb253558f022bcbef39fb6ad31dc58cdfefdd5b51908160200151848360400151856040516106a294939291906128c5565b60405180910390a1505050565b600b5481565b6000600482815481106106cb576106ca612a7f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600c6020528060005260406000206000915090505481565b60026000540361075a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075190612afa565b60405180910390fd5b600260008190555061076b81610e77565b600160008190555050565b6002600054036107bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b290612afa565b60405180910390fd5b60026000819055506107cb610f04565b6001600081905550565b600481815481106107e557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61081c610cd1565b61085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290612990565b60405180910390fd5b600060086000600160065461087091906129df565b81526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905080600001518203610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90612b66565b60405180910390fd5b6109168282602001518360400151610d29565b7fd968de290ed68f978b9e4816f7d4be9ef46189fe8eeb3eeb86199e7229cf2de081600001518360405161094b92919061290a565b60405180910390a15050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a3a9190612851565b602060405180830381865afa158015610a57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7b9190612b9b565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b055760055481610b0291906129df565b90505b90565b600080600860006001600654610b1e91906129df565b8152602001908152602001600020600101549150600860006001600654610b4591906129df565b81526020019081526020016000206002015490509091565b60035481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600480549050905090565b600260005403610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd690612afa565b60405180910390fd5b6002600081905550610bf081610f8f565b600160008190555050565b60025481565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549150610c5283610fec565b9050915091565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860006001600654610c9491906129df565b815260200190815260200160002060000154905090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008103610d6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6390612c14565b60405180910390fd5b60008303610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690612c80565b60405180910390fd5b60006006549050600160066000828254610dc99190612ca0565b925050819055506040518060a0016040528085815260200184815260200183815260200142815260200160008152506008600083815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030155608082015181600401559050506000811115610e71574260086000600184610e5b91906129df565b8152602001908152602001600020600401819055505b50505050565b42600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610ef8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eef90612d20565b60405180910390fd5b610f01816110df565b50565b42600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90612d20565b60405180910390fd5b610f8d6114c1565b565b600b5442610f9d9190612ca0565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610fe9816116ce565b50565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540361108157600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015490506110da565b61108a82611bba565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546110d79190612ca0565b90505b919050565b6000600760006110ed611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060008203611170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790612d8c565b60405180910390fd5b818110156111b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111aa90612df8565b60405180910390fd5b6111c36111be611dad565b611db5565b818103611399576000600480548060200260200160405190810160405280929190818152602001828054801561124e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611204575b5050505050905060005b815181101561139657611269611dad565b73ffffffffffffffffffffffffffffffffffffffff1682828151811061129257611291612a7f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036113855781600183516112c491906129df565b815181106112d5576112d4612a7f565b5b6020026020010151600482815481106112f1576112f0612a7f565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600480548061134b5761134a612e18565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611396565b8061138f90612e47565b9050611258565b50505b81600760006113a6611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546113f291906129df565b92505081905550816005600082825461140b91906129df565b92505081905550611468600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630611441611dad565b857f0000000000000000000000000000000000000000000000000000000000000000611ebb565b611470611dad565b73ffffffffffffffffffffffffffffffffffffffff167f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b836040516114b591906127c8565b60405180910390a25050565b60006114d36114ce611dad565b611bba565b600760006114df611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546115279190612ca0565b90506000810361156c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156390612edb565b60405180910390fd5b4260076000611579611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600760006115c8611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600160065461161891906129df565b60076000611624611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030181905550611676611670611dad565b826120bb565b61167e611dad565b73ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe826040516116c391906127c8565b60405180910390a250565b60008103611711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170890612f47565b60405180910390fd5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036117a4577f0000000000000000000000000000000000000000000000000000000000000000905061180d565b600034146117e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117de90612fb3565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b60006007600061181b611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156118745761186f61186a611dad565b611db5565b611989565b600461187e611dad565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600760006118eb611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160065461193b91906129df565b60076000611947611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119c49190612851565b602060405180830381865afa1580156119e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a059190612b9b565b9050611a5d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611a35611dad565b30867f0000000000000000000000000000000000000000000000000000000000000000611ebb565b6000818373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a999190612851565b602060405180830381865afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190612b9b565b611ae491906129df565b90508060076000611af3611dad565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254611b3f9190612ca0565b925050819055508060056000828254611b589190612ca0565b92505081905550611b67611dad565b73ffffffffffffffffffffffffffffffffffffffff167fb539ca1e5c8d398ddf1c41c30166f33404941683be4683319b57669a93dad4ef82604051611bac91906127c8565b60405180910390a250505050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000816060015190506000600654905060008290505b81811015611d6a576000600860008381526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000848303611cb6578560200151611cbc565b81606001515b9050600080836080015103611cd15742611cd7565b82608001515b9050600080611d0489600001518585611cf091906129df565b611cfa9190612fd3565b8660200151612160565b91509150600080611d338c8860400151896000015186611d249190613044565b611d2e9190613044565b6121b3565b91509150838015611d415750815b611d4b578b611d4d565b805b9b5050505050505050600181611d639190612ca0565b9050611c47565b50611d8384600354600a611d7e91906131a8565b612160565b905080945050600254600a611d9891906131a8565b84611da39190613044565b9350505050919050565b600033905090565b6000611dc082611bba565b905080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254611e149190612ca0565b9250508190555042600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600654611e7191906129df565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505050565b60008203156120b45773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036120a6573073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611fb9578073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b8152600401611f7791906127c8565b600060405180830381600087803b158015611f9157600080fd5b505af1158015611fa5573d6000803e3d6000fd5b50505050611fb48383836121e2565b6120a1565b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120945734821461202e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120259061323f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561207657600080fd5b505af115801561208a573d6000803e3d6000fd5b50505050506120a0565b61209f8383836121e2565b5b5b6120b3565b6120b2858585856122e6565b5b5b5050505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161211892919061325f565b6020604051808303816000875af1158015612137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215b91906132c0565b505050565b600080600084036121785760016000915091506121ac565b60008385029050838582816121905761218f613015565b5b04146121a35760008092509250506121ac565b60018192509250505b9250929050565b60008060008385019050848110156121d25760008092509250506121db565b60018192509250505b9250929050565b60008373ffffffffffffffffffffffffffffffffffffffff16836040516122089061331e565b60006040518083038185875af1925050503d8060008114612245576040519150601f19603f3d011682016040523d82523d6000602084013e61224a565b606091505b50509050806122e0578173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b50505050506122df84848473ffffffffffffffffffffffffffffffffffffffff166123b29092919063ffffffff16565b5b50505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603156123ac573073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361237d5761237882828673ffffffffffffffffffffffffffffffffffffffff166123b29092919063ffffffff16565b6123ab565b6123aa8383838773ffffffffffffffffffffffffffffffffffffffff16612438909392919063ffffffff16565b5b5b50505050565b6124338363a9059cbb60e01b84846040516024016123d192919061325f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124c1565b505050565b6124bb846323b872dd60e01b85858560405160240161245993929190613333565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124c1565b50505050565b6000612523826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125889092919063ffffffff16565b9050600081511115612583578080602001905181019061254391906132c0565b612582576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612579906133dc565b60405180910390fd5b5b505050565b606061259784846000856125a0565b90509392505050565b6060824710156125e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125dc9061346e565b60405180910390fd5b6125ee856126b4565b61262d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612624906134da565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516126569190613560565b60006040518083038185875af1925050503d8060008114612693576040519150601f19603f3d011682016040523d82523d6000602084013e612698565b606091505b50915091506126a88282866126d7565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606083156126e757829050612737565b6000835111156126fa5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272e91906135cc565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b61275681612743565b811461276157600080fd5b50565b6000813590506127738161274d565b92915050565b600080604083850312156127905761278f61273e565b5b600061279e85828601612764565b92505060206127af85828601612764565b9150509250929050565b6127c281612743565b82525050565b60006020820190506127dd60008301846127b9565b92915050565b6000602082840312156127f9576127f861273e565b5b600061280784828501612764565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061283b82612810565b9050919050565b61284b81612830565b82525050565b60006020820190506128666000830184612842565b92915050565b61287581612830565b811461288057600080fd5b50565b6000813590506128928161286c565b92915050565b6000602082840312156128ae576128ad61273e565b5b60006128bc84828501612883565b91505092915050565b60006080820190506128da60008301876127b9565b6128e760208301866127b9565b6128f460408301856127b9565b61290160608301846127b9565b95945050505050565b600060408201905061291f60008301856127b9565b61292c60208301846127b9565b9392505050565b600082825260208201905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b600061297a600e83612933565b915061298582612944565b602082019050919050565b600060208201905081810360008301526129a98161296d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129ea82612743565b91506129f583612743565b9250828203905081811115612a0d57612a0c6129b0565b5b92915050565b7f52657761726420726174696f20756e6368616e6765642e000000000000000000600082015250565b6000612a49601783612933565b9150612a5482612a13565b602082019050919050565b60006020820190508181036000830152612a7881612a3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612ae4601f83612933565b9150612aef82612aae565b602082019050919050565b60006020820190508181036000830152612b1381612ad7565b9050919050565b7f54696d652d756e697420756e6368616e6765642e000000000000000000000000600082015250565b6000612b50601483612933565b9150612b5b82612b1a565b602082019050919050565b60006020820190508181036000830152612b7f81612b43565b9050919050565b600081519050612b958161274d565b92915050565b600060208284031215612bb157612bb061273e565b5b6000612bbf84828501612b86565b91505092915050565b7f6469766964652062792030000000000000000000000000000000000000000000600082015250565b6000612bfe600b83612933565b9150612c0982612bc8565b602082019050919050565b60006020820190508181036000830152612c2d81612bf1565b9050919050565b7f74696d652d756e69742063616e27742062652030000000000000000000000000600082015250565b6000612c6a601483612933565b9150612c7582612c34565b602082019050919050565b60006020820190508181036000830152612c9981612c5d565b9050919050565b6000612cab82612743565b9150612cb683612743565b9250828201905080821115612cce57612ccd6129b0565b5b92915050565b7f5374616b696e67206973206c6f636b6564000000000000000000000000000000600082015250565b6000612d0a601183612933565b9150612d1582612cd4565b602082019050919050565b60006020820190508181036000830152612d3981612cfd565b9050919050565b7f5769746864726177696e67203020746f6b656e73000000000000000000000000600082015250565b6000612d76601483612933565b9150612d8182612d40565b602082019050919050565b60006020820190508181036000830152612da581612d69565b9050919050565b7f5769746864726177696e67206d6f7265207468616e207374616b656400000000600082015250565b6000612de2601c83612933565b9150612ded82612dac565b602082019050919050565b60006020820190508181036000830152612e1181612dd5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000612e5282612743565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e8457612e836129b0565b5b600182019050919050565b7f4e6f207265776172647300000000000000000000000000000000000000000000600082015250565b6000612ec5600a83612933565b9150612ed082612e8f565b602082019050919050565b60006020820190508181036000830152612ef481612eb8565b9050919050565b7f5374616b696e67203020746f6b656e7300000000000000000000000000000000600082015250565b6000612f31601083612933565b9150612f3c82612efb565b602082019050919050565b60006020820190508181036000830152612f6081612f24565b9050919050565b7f56616c7565206e6f742030000000000000000000000000000000000000000000600082015250565b6000612f9d600b83612933565b9150612fa882612f67565b602082019050919050565b60006020820190508181036000830152612fcc81612f90565b9050919050565b6000612fde82612743565b9150612fe983612743565b9250828202612ff781612743565b9150828204841483151761300e5761300d6129b0565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304f82612743565b915061305a83612743565b92508261306a57613069613015565b5b828204905092915050565b60008160011c9050919050565b6000808291508390505b60018511156130cc578086048111156130a8576130a76129b0565b5b60018516156130b75780820291505b80810290506130c585613075565b945061308c565b94509492505050565b6000826130e557600190506131a1565b816130f357600090506131a1565b8160018114613109576002811461311357613142565b60019150506131a1565b60ff841115613125576131246129b0565b5b8360020a91508482111561313c5761313b6129b0565b5b506131a1565b5060208310610133831016604e8410600b84101617156131775782820a905083811115613172576131716129b0565b5b6131a1565b6131848484846001613082565b9250905081840481111561319b5761319a6129b0565b5b81810290505b9392505050565b60006131b382612743565b91506131be83612743565b92506131eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846130d5565b905092915050565b7f6d73672e76616c756520213d20616d6f756e7400000000000000000000000000600082015250565b6000613229601383612933565b9150613234826131f3565b602082019050919050565b600060208201905081810360008301526132588161321c565b9050919050565b60006040820190506132746000830185612842565b61328160208301846127b9565b9392505050565b60008115159050919050565b61329d81613288565b81146132a857600080fd5b50565b6000815190506132ba81613294565b92915050565b6000602082840312156132d6576132d561273e565b5b60006132e4848285016132ab565b91505092915050565b600081905092915050565b50565b60006133086000836132ed565b9150613313826132f8565b600082019050919050565b6000613329826132fb565b9150819050919050565b60006060820190506133486000830186612842565b6133556020830185612842565b61336260408301846127b9565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006133c6602a83612933565b91506133d18261336a565b604082019050919050565b600060208201905081810360008301526133f5816133b9565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613458602683612933565b9150613463826133fc565b604082019050919050565b600060208201905081810360008301526134878161344b565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006134c4601d83612933565b91506134cf8261348e565b602082019050919050565b600060208201905081810360008301526134f3816134b7565b9050919050565b600081519050919050565b60005b83811015613523578082015181840152602081019050613508565b60008484015250505050565b600061353a826134fa565b61354481856132ed565b9350613554818560208601613505565b80840191505092915050565b600061356c828461352f565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061359e82613577565b6135a88185612933565b93506135b8818560208601613505565b6135c181613582565b840191505092915050565b600060208201905081810360008301526135e68184613593565b90509291505056fea264697066735822122017a6f6b9663cf486408156b2ba6330c03b694bd80cd565678a6d388bb84ccda364736f6c63430008120033",
  "devdoc": {
    "events": {
      "RewardsClaimed(address,uint256)": {
        "details": "Emitted when a staker claims staking rewards."
      },
      "TokensStaked(address,uint256)": {
        "details": "Emitted when tokens are staked."
      },
      "TokensWithdrawn(address,uint256)": {
        "details": "Emitted when a tokens are withdrawn."
      },
      "UpdatedMinStakeAmount(uint256,uint256)": {
        "details": "Emitted when contract admin updates minimum staking amount."
      },
      "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": {
        "details": "Emitted when contract admin updates rewardsPerUnitTime."
      },
      "UpdatedTimeUnit(uint256,uint256)": {
        "details": "Emitted when contract admin updates timeUnit."
      }
    },
    "kind": "dev",
    "methods": {
      "claimRewards()": {
        "details": "See {_claimRewards}. Override that to implement custom logic.             See {_calculateRewards} for reward-calculation logic."
      },
      "getStakeInfo(address)": {
        "params": {
          "_staker": "Address for which to calculated rewards."
        },
        "returns": {
          "_rewards": "       Available reward amount.",
          "_tokensStaked": "  Amount of tokens staked."
        }
      },
      "setRewardRatio(uint256,uint256)": {
        "details": "Only admin/authorized-account can call it.",
        "params": {
          "_denominator": "Reward ratio denominator.",
          "_numerator": "Reward ratio numerator."
        }
      },
      "setTimeUnit(uint256)": {
        "details": "Only admin/authorized-account can call it.",
        "params": {
          "_timeUnit": "New time unit."
        }
      },
      "stake(uint256)": {
        "details": "See {_stake}. Override that to implement custom logic.",
        "params": {
          "_amount": "Amount to stake."
        }
      },
      "withdraw(uint256)": {
        "details": "See {_withdraw}. Override that to implement custom logic.",
        "params": {
          "_amount": "Amount to withdraw."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claim accumulated rewards."
      },
      "deployer()": {
        "notice": "We store the contract deployer's address only for the purposes of the example  in the code comment below.  Doing this is not necessary to use the `Staking20` extension."
      },
      "getRewardTokenBalance()": {
        "notice": "View total rewards available in the staking contract."
      },
      "getStakeInfo(address)": {
        "notice": "View amount staked and rewards for a user."
      },
      "lockTime()": {
        "notice": "Lock time for staking in seconds."
      },
      "setRewardRatio(uint256,uint256)": {
        "notice": "Set rewards per unit of time.           Interpreted as (numerator/denominator) rewards per second/per day/etc based on time-unit.           For e.g., ratio of 1/20 would mean 1 reward token for every 20 tokens staked."
      },
      "setTimeUnit(uint256)": {
        "notice": "Set time unit. Set as a number of seconds.           Could be specified as -- x * 1 hours, x * 1 days, etc."
      },
      "stake(uint256)": {
        "notice": "Stake ERC20 Tokens."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw staked ERC20 tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4693,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3124,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3127,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingTokenDecimals",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3130,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardTokenDecimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3134,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakersArray",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3137,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingTokenBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3140,
        "contract": "contracts/Staking.sol:Staking",
        "label": "nextConditionId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3146,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Staker)4085_storage)"
      },
      {
        "astId": 3152,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingConditions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(StakingCondition)4096_storage)"
      },
      {
        "astId": 6619,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6622,
        "contract": "contracts/Staking.sol:Staking",
        "label": "deployer",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6625,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lockTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6629,
        "contract": "contracts/Staking.sol:Staking",
        "label": "lockTimeOf",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Staker)4085_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStaking20.Staker)",
        "numberOfBytes": "32",
        "value": "t_struct(Staker)4085_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(StakingCondition)4096_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStaking20.StakingCondition)",
        "numberOfBytes": "32",
        "value": "t_struct(StakingCondition)4096_storage"
      },
      "t_struct(Staker)4085_storage": {
        "encoding": "inplace",
        "label": "struct IStaking20.Staker",
        "members": [
          {
            "astId": 4078,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amountStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4080,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeOfLastUpdate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4082,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unclaimedRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4084,
            "contract": "contracts/Staking.sol:Staking",
            "label": "conditionIdOflastUpdate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakingCondition)4096_storage": {
        "encoding": "inplace",
        "label": "struct IStaking20.StakingCondition",
        "members": [
          {
            "astId": 4087,
            "contract": "contracts/Staking.sol:Staking",
            "label": "timeUnit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4089,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardRatioNumerator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4091,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardRatioDenominator",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4093,
            "contract": "contracts/Staking.sol:Staking",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4095,
            "contract": "contracts/Staking.sol:Staking",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}