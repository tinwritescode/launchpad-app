// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum AccessType {
    PUBLIC
    PRIVATE
    COMMUNITY
}

enum Status {
    ACTIVE
    INACTIVE
    DELETED
}

enum Role {
    SUPER_ADMIN
    ADMIN
    USER
}

model User {
    id            String   @id @default(uuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    walletAddress String   @unique
    roles         Role[]
}

model Chain {
    id       String    @id @default(uuid())
    name     String    @unique
    image    String?   @unique
    projects Project[]
}

model TokenomicsItem {
    id        String  @id @default(uuid())
    name      String
    value     Int
    Project   Project @relation(fields: [projectId], references: [id])
    projectId String
}

model Project {
    id                String           @id @default(uuid())
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    name              String           @unique
    image             String?          @unique
    Chain             Chain            @relation(fields: [chainId], references: [id])
    chainId           String
    status            Status           @default(INACTIVE)
    startTime         DateTime
    endTime           DateTime
    totalRaise        Int?
    targetRaise       Int?
    allocation        Int?
    participants      Int?
    Token             Token            @relation(fields: [tokenId], references: [id])
    tokenId           String           @unique
    summaryContent    String?
    videoURL          String?
    scheduleRounds    ScheduleRound[]
    scheduleOpenDate  DateTime?
    scheduleCloseDate DateTime?
    comparisonContent String?
    tokenomicsItems   TokenomicsItem[]
    roadmapContent    String?
}

model Token {
    id          String   @id @default(uuid())
    Project     Project?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   @unique
    symbol      String   @unique
    decimals    Int
    totalSupply Int
    address     String
}

model ScheduleRound {
    id            String   @id @default(uuid())
    Project       Project  @relation(fields: [projectId], references: [id])
    projectId     String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String
    startTime     DateTime
    endTime       DateTime
    pricePerToken Int?
}

model DemoProject {
    id   String @id @default(uuid())
    name String
}
